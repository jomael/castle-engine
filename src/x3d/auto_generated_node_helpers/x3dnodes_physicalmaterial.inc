{ -*- buffer-read-only: t -*-

  Copyright 2015-2020 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal .

  The documentation for properties should go to x3dnodes_documentation.txt . }

{$ifdef read_interface}

  strict private
    function GetBaseColor: TCastleColorRGB;
    procedure SetBaseColor(const Value: TCastleColorRGB);
    function GetBaseTexture: TAbstractSingleTextureNode;
    procedure SetBaseTexture(const Value: TAbstractSingleTextureNode);
    function GetBaseTextureChannel: Integer;
    procedure SetBaseTextureChannel(const Value: Integer);
    function GetMetallic: Single;
    procedure SetMetallic(const Value: Single);
    function GetMetallicRoughnessTexture: TAbstractSingleTextureNode;
    procedure SetMetallicRoughnessTexture(const Value: TAbstractSingleTextureNode);
    function GetMetallicRoughnessTextureChannel: Integer;
    procedure SetMetallicRoughnessTextureChannel(const Value: Integer);
    function GetRoughness: Single;
    procedure SetRoughness(const Value: Single);
    function GetTransparency: Single;
    procedure SetTransparency(const Value: Single);
  public
    procedure CreateNode; override;
    class function ClassX3DType: string; override;

    strict private FFdBaseColor: TSFColor;
    { X3D field "baseColor". } { }
    public property FdBaseColor: TSFColor read FFdBaseColor;
    { X3D field "baseColor". } { }
    property BaseColor: TCastleColorRGB read GetBaseColor write SetBaseColor;

    strict private FFdBaseTexture: TSFNode;
    { X3D field "baseTexture". } { }
    public property FdBaseTexture: TSFNode read FFdBaseTexture;
    { X3D field "baseTexture". } { }
    property BaseTexture: TAbstractSingleTextureNode read GetBaseTexture write SetBaseTexture;

    strict private FFdBaseTextureChannel: TSFInt32;
    { X3D field "baseTextureChannel". } { }
    public property FdBaseTextureChannel: TSFInt32 read FFdBaseTextureChannel;
    { X3D field "baseTextureChannel". } { }
    property BaseTextureChannel: Integer read GetBaseTextureChannel write SetBaseTextureChannel;

    strict private FFdMetallic: TSFFloat;
    { X3D field "metallic". } { }
    public property FdMetallic: TSFFloat read FFdMetallic;
    { X3D field "metallic". } { }
    property Metallic: Single read GetMetallic write SetMetallic;

    strict private FFdMetallicRoughnessTexture: TSFNode;
    { X3D field "metallicRoughnessTexture". } { }
    public property FdMetallicRoughnessTexture: TSFNode read FFdMetallicRoughnessTexture;
    { X3D field "metallicRoughnessTexture". } { }
    property MetallicRoughnessTexture: TAbstractSingleTextureNode read GetMetallicRoughnessTexture write SetMetallicRoughnessTexture;

    strict private FFdMetallicRoughnessTextureChannel: TSFInt32;
    { X3D field "metallicRoughnessTextureChannel". } { }
    public property FdMetallicRoughnessTextureChannel: TSFInt32 read FFdMetallicRoughnessTextureChannel;
    { X3D field "metallicRoughnessTextureChannel". } { }
    property MetallicRoughnessTextureChannel: Integer read GetMetallicRoughnessTextureChannel write SetMetallicRoughnessTextureChannel;

    strict private FFdRoughness: TSFFloat;
    { X3D field "roughness". } { }
    public property FdRoughness: TSFFloat read FFdRoughness;
    { X3D field "roughness". } { }
    property Roughness: Single read GetRoughness write SetRoughness;

    strict private FFdTransparency: TSFFloat;
    { X3D field "transparency". } { }
    public property FdTransparency: TSFFloat read FFdTransparency;
    { X3D field "transparency". } { }
    property Transparency: Single read GetTransparency write SetTransparency;

{$endif read_interface}

{$ifdef read_implementation}

{ TPhysicalMaterialNode ----------------------------------------------- }

function TPhysicalMaterialNode.GetBaseColor: TCastleColorRGB;
begin
  Result := FdBaseColor.Value;
end;

procedure TPhysicalMaterialNode.SetBaseColor(const Value: TCastleColorRGB);
begin
  FdBaseColor.Send(Value);
end;

function TPhysicalMaterialNode.GetBaseTexture: TAbstractSingleTextureNode;
begin
  if FdBaseTexture.Value is TAbstractSingleTextureNode then
    Result := TAbstractSingleTextureNode(FdBaseTexture.Value)
  else
    Result := nil;
end;

procedure TPhysicalMaterialNode.SetBaseTexture(const Value: TAbstractSingleTextureNode);
begin
  FdBaseTexture.Send(Value);
end;

function TPhysicalMaterialNode.GetBaseTextureChannel: Integer;
begin
  Result := FdBaseTextureChannel.Value;
end;

procedure TPhysicalMaterialNode.SetBaseTextureChannel(const Value: Integer);
begin
  FdBaseTextureChannel.Send(Value);
end;

function TPhysicalMaterialNode.GetMetallic: Single;
begin
  Result := FdMetallic.Value;
end;

procedure TPhysicalMaterialNode.SetMetallic(const Value: Single);
begin
  FdMetallic.Send(Value);
end;

function TPhysicalMaterialNode.GetMetallicRoughnessTexture: TAbstractSingleTextureNode;
begin
  if FdMetallicRoughnessTexture.Value is TAbstractSingleTextureNode then
    Result := TAbstractSingleTextureNode(FdMetallicRoughnessTexture.Value)
  else
    Result := nil;
end;

procedure TPhysicalMaterialNode.SetMetallicRoughnessTexture(const Value: TAbstractSingleTextureNode);
begin
  FdMetallicRoughnessTexture.Send(Value);
end;

function TPhysicalMaterialNode.GetMetallicRoughnessTextureChannel: Integer;
begin
  Result := FdMetallicRoughnessTextureChannel.Value;
end;

procedure TPhysicalMaterialNode.SetMetallicRoughnessTextureChannel(const Value: Integer);
begin
  FdMetallicRoughnessTextureChannel.Send(Value);
end;

function TPhysicalMaterialNode.GetRoughness: Single;
begin
  Result := FdRoughness.Value;
end;

procedure TPhysicalMaterialNode.SetRoughness(const Value: Single);
begin
  FdRoughness.Send(Value);
end;

function TPhysicalMaterialNode.GetTransparency: Single;
begin
  Result := FdTransparency.Value;
end;

procedure TPhysicalMaterialNode.SetTransparency(const Value: Single);
begin
  FdTransparency.Send(Value);
end;

class function TPhysicalMaterialNode.ClassX3DType: String;
begin
  Result := 'PhysicalMaterial';
end;

procedure TPhysicalMaterialNode.CreateNode;
begin
  inherited;

  FFdBaseColor := TSFColor.Create(Self, True, 'baseColor', Vector3(1, 1, 1));
   FdBaseColor.ChangesAlways := [chVisibleNonGeometry];
  AddField(FFdBaseColor);
  { X3D specification comment: [0,1] }

  FFdBaseTexture := TSFNode.Create(Self, True, 'baseTexture', [TAbstractSingleTextureNode]);
   FdBaseTexture.ChangesAlways := [chVisibleNonGeometry];
  AddField(FFdBaseTexture);

  FFdBaseTextureChannel := TSFInt32.Create(Self, True, 'baseTextureChannel', 0);
   FdBaseTextureChannel.ChangesAlways := [chVisibleNonGeometry];
  AddField(FFdBaseTextureChannel);

  FFdMetallic := TSFFloat.Create(Self, True, 'metallic', 1);
   FdMetallic.ChangesAlways := [chVisibleNonGeometry];
  AddField(FFdMetallic);
  { X3D specification comment: [0,1] }

  FFdMetallicRoughnessTexture := TSFNode.Create(Self, True, 'metallicRoughnessTexture', [TAbstractSingleTextureNode]);
   FdMetallicRoughnessTexture.ChangesAlways := [chVisibleNonGeometry];
  AddField(FFdMetallicRoughnessTexture);

  FFdMetallicRoughnessTextureChannel := TSFInt32.Create(Self, True, 'metallicRoughnessTextureChannel', 0);
   FdMetallicRoughnessTextureChannel.ChangesAlways := [chVisibleNonGeometry];
  AddField(FFdMetallicRoughnessTextureChannel);

  FFdRoughness := TSFFloat.Create(Self, True, 'roughness', 1);
   FdRoughness.ChangesAlways := [chVisibleNonGeometry];
  AddField(FFdRoughness);
  { X3D specification comment: [0,1] }

  FFdTransparency := TSFFloat.Create(Self, True, 'transparency', 0);
   FdTransparency.ChangesAlways := [chVisibleNonGeometry];
  AddField(FFdTransparency);
  { X3D specification comment: [0,1] }

  DefaultContainerField := 'material';
end;

{$endif read_implementation}
