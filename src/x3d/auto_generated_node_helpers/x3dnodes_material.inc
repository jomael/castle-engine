{ -*- buffer-read-only: t -*-

  Copyright 2015-2020 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal .

  The documentation for properties should go to x3dnodes_documentation.txt . }

{$ifdef read_interface}

  strict private
    function GetAmbientIntensity: Single;
    procedure SetAmbientIntensity(const Value: Single);
    function GetAmbientTexture: TAbstractSingleTextureNode;
    procedure SetAmbientTexture(const Value: TAbstractSingleTextureNode);
    function GetAmbientTextureChannel: Integer;
    procedure SetAmbientTextureChannel(const Value: Integer);
    function GetDiffuseColor: TCastleColorRGB;
    procedure SetDiffuseColor(const Value: TCastleColorRGB);
    function GetDiffuseTexture: TAbstractSingleTextureNode;
    procedure SetDiffuseTexture(const Value: TAbstractSingleTextureNode);
    function GetDiffuseTextureChannel: Integer;
    procedure SetDiffuseTextureChannel(const Value: Integer);
    function GetSpecularColor: TCastleColorRGB;
    procedure SetSpecularColor(const Value: TCastleColorRGB);
    function GetSpecularTexture: TAbstractSingleTextureNode;
    procedure SetSpecularTexture(const Value: TAbstractSingleTextureNode);
    function GetSpecularTextureChannel: Integer;
    procedure SetSpecularTextureChannel(const Value: Integer);
    function GetShininess: Single;
    procedure SetShininess(const Value: Single);
    function GetShininessTexture: TAbstractSingleTextureNode;
    procedure SetShininessTexture(const Value: TAbstractSingleTextureNode);
    function GetShininessTextureChannel: Integer;
    procedure SetShininessTextureChannel(const Value: Integer);
    function GetTransparency: Single;
    procedure SetTransparency(const Value: Single);
    function GetMirror: Single;
    procedure SetMirror(const Value: Single);
{$ifndef CASTLE_SLIM_NODES}
    function GetReflSpecularExp: Single;
    procedure SetReflSpecularExp(const Value: Single);
{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
    function GetTransSpecularExp: Single;
    procedure SetTransSpecularExp(const Value: Single);
{$endif not CASTLE_SLIM_NODES}
  public
    { X3D field "ambientIntensity". } { }
    property AmbientIntensity: Single read GetAmbientIntensity write SetAmbientIntensity;
    { X3D field "ambientTexture". } { }
    property AmbientTexture: TAbstractSingleTextureNode read GetAmbientTexture write SetAmbientTexture;
    { X3D field "ambientTextureChannel". } { }
    property AmbientTextureChannel: Integer read GetAmbientTextureChannel write SetAmbientTextureChannel;
    { X3D field "diffuseColor". } { }
    property DiffuseColor: TCastleColorRGB read GetDiffuseColor write SetDiffuseColor;
    { X3D field "diffuseTexture". } { }
    property DiffuseTexture: TAbstractSingleTextureNode read GetDiffuseTexture write SetDiffuseTexture;
    { X3D field "diffuseTextureChannel". } { }
    property DiffuseTextureChannel: Integer read GetDiffuseTextureChannel write SetDiffuseTextureChannel;
    { X3D field "specularColor". } { }
    property SpecularColor: TCastleColorRGB read GetSpecularColor write SetSpecularColor;
    { X3D field "specularTexture". } { }
    property SpecularTexture: TAbstractSingleTextureNode read GetSpecularTexture write SetSpecularTexture;
    { X3D field "specularTextureChannel". } { }
    property SpecularTextureChannel: Integer read GetSpecularTextureChannel write SetSpecularTextureChannel;
    { X3D field "shininess". } { }
    property Shininess: Single read GetShininess write SetShininess;
    { X3D field "shininessTexture". } { }
    property ShininessTexture: TAbstractSingleTextureNode read GetShininessTexture write SetShininessTexture;
    { X3D field "shininessTextureChannel". } { }
    property ShininessTextureChannel: Integer read GetShininessTextureChannel write SetShininessTextureChannel;
    { X3D field "transparency". } { }
    property Transparency: Single read GetTransparency write SetTransparency;
    { X3D field "mirror". } { }
    property Mirror: Single read GetMirror write SetMirror;
{$ifndef CASTLE_SLIM_NODES}
    { Set X3D field "reflSpecular". } { }
    procedure SetReflSpecular(const Value: array of TCastleColorRGB);
{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
    { Set X3D field "reflSpecular". } { }
    procedure SetReflSpecular(const Value: TVector3List);
{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
    { Set X3D field "reflDiffuse". } { }
    procedure SetReflDiffuse(const Value: array of TCastleColorRGB);
{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
    { Set X3D field "reflDiffuse". } { }
    procedure SetReflDiffuse(const Value: TVector3List);
{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
    { Set X3D field "transSpecular". } { }
    procedure SetTransSpecular(const Value: array of TCastleColorRGB);
{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
    { Set X3D field "transSpecular". } { }
    procedure SetTransSpecular(const Value: TVector3List);
{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
    { Set X3D field "transDiffuse". } { }
    procedure SetTransDiffuse(const Value: array of TCastleColorRGB);
{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
    { Set X3D field "transDiffuse". } { }
    procedure SetTransDiffuse(const Value: TVector3List);
{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
    { X3D field "reflSpecularExp". } { }
    property ReflSpecularExp: Single read GetReflSpecularExp write SetReflSpecularExp;
{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
    { X3D field "transSpecularExp". } { }
    property TransSpecularExp: Single read GetTransSpecularExp write SetTransSpecularExp;
{$endif not CASTLE_SLIM_NODES}

{$endif read_interface}

{$ifdef read_implementation}

{ TMaterialNode ----------------------------------------------- }

function TMaterialNode.GetAmbientIntensity: Single;
begin
  Result := FdAmbientIntensity.Value;
end;

procedure TMaterialNode.SetAmbientIntensity(const Value: Single);
begin
  FdAmbientIntensity.Send(Value);
end;

function TMaterialNode.GetAmbientTexture: TAbstractSingleTextureNode;
begin
  if FdAmbientTexture.Value is TAbstractSingleTextureNode then
    Result := TAbstractSingleTextureNode(FdAmbientTexture.Value)
  else
    Result := nil;
end;

procedure TMaterialNode.SetAmbientTexture(const Value: TAbstractSingleTextureNode);
begin
  FdAmbientTexture.Send(Value);
end;

function TMaterialNode.GetAmbientTextureChannel: Integer;
begin
  Result := FdAmbientTextureChannel.Value;
end;

procedure TMaterialNode.SetAmbientTextureChannel(const Value: Integer);
begin
  FdAmbientTextureChannel.Send(Value);
end;

function TMaterialNode.GetDiffuseColor: TCastleColorRGB;
begin
  Result := FdDiffuseColor.Value;
end;

procedure TMaterialNode.SetDiffuseColor(const Value: TCastleColorRGB);
begin
  FdDiffuseColor.Send(Value);
end;

function TMaterialNode.GetDiffuseTexture: TAbstractSingleTextureNode;
begin
  if FdDiffuseTexture.Value is TAbstractSingleTextureNode then
    Result := TAbstractSingleTextureNode(FdDiffuseTexture.Value)
  else
    Result := nil;
end;

procedure TMaterialNode.SetDiffuseTexture(const Value: TAbstractSingleTextureNode);
begin
  FdDiffuseTexture.Send(Value);
end;

function TMaterialNode.GetDiffuseTextureChannel: Integer;
begin
  Result := FdDiffuseTextureChannel.Value;
end;

procedure TMaterialNode.SetDiffuseTextureChannel(const Value: Integer);
begin
  FdDiffuseTextureChannel.Send(Value);
end;

function TMaterialNode.GetSpecularColor: TCastleColorRGB;
begin
  Result := FdSpecularColor.Value;
end;

procedure TMaterialNode.SetSpecularColor(const Value: TCastleColorRGB);
begin
  FdSpecularColor.Send(Value);
end;

function TMaterialNode.GetSpecularTexture: TAbstractSingleTextureNode;
begin
  if FdSpecularTexture.Value is TAbstractSingleTextureNode then
    Result := TAbstractSingleTextureNode(FdSpecularTexture.Value)
  else
    Result := nil;
end;

procedure TMaterialNode.SetSpecularTexture(const Value: TAbstractSingleTextureNode);
begin
  FdSpecularTexture.Send(Value);
end;

function TMaterialNode.GetSpecularTextureChannel: Integer;
begin
  Result := FdSpecularTextureChannel.Value;
end;

procedure TMaterialNode.SetSpecularTextureChannel(const Value: Integer);
begin
  FdSpecularTextureChannel.Send(Value);
end;

function TMaterialNode.GetShininess: Single;
begin
  Result := FdShininess.Value;
end;

procedure TMaterialNode.SetShininess(const Value: Single);
begin
  FdShininess.Send(Value);
end;

function TMaterialNode.GetShininessTexture: TAbstractSingleTextureNode;
begin
  if FdShininessTexture.Value is TAbstractSingleTextureNode then
    Result := TAbstractSingleTextureNode(FdShininessTexture.Value)
  else
    Result := nil;
end;

procedure TMaterialNode.SetShininessTexture(const Value: TAbstractSingleTextureNode);
begin
  FdShininessTexture.Send(Value);
end;

function TMaterialNode.GetShininessTextureChannel: Integer;
begin
  Result := FdShininessTextureChannel.Value;
end;

procedure TMaterialNode.SetShininessTextureChannel(const Value: Integer);
begin
  FdShininessTextureChannel.Send(Value);
end;

function TMaterialNode.GetTransparency: Single;
begin
  Result := FdTransparency.Value;
end;

procedure TMaterialNode.SetTransparency(const Value: Single);
begin
  FdTransparency.Send(Value);
end;

function TMaterialNode.GetMirror: Single;
begin
  Result := FdMirror.Value;
end;

procedure TMaterialNode.SetMirror(const Value: Single);
begin
  FdMirror.Send(Value);
end;

{$ifndef CASTLE_SLIM_NODES}
procedure TMaterialNode.SetReflSpecular(const Value: array of TCastleColorRGB);
begin
  FdReflSpecular.Send(Value);
end;

{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
procedure TMaterialNode.SetReflSpecular(const Value: TVector3List);
begin
  FdReflSpecular.Send(Value);
end;

{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
procedure TMaterialNode.SetReflDiffuse(const Value: array of TCastleColorRGB);
begin
  FdReflDiffuse.Send(Value);
end;

{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
procedure TMaterialNode.SetReflDiffuse(const Value: TVector3List);
begin
  FdReflDiffuse.Send(Value);
end;

{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
procedure TMaterialNode.SetTransSpecular(const Value: array of TCastleColorRGB);
begin
  FdTransSpecular.Send(Value);
end;

{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
procedure TMaterialNode.SetTransSpecular(const Value: TVector3List);
begin
  FdTransSpecular.Send(Value);
end;

{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
procedure TMaterialNode.SetTransDiffuse(const Value: array of TCastleColorRGB);
begin
  FdTransDiffuse.Send(Value);
end;

{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
procedure TMaterialNode.SetTransDiffuse(const Value: TVector3List);
begin
  FdTransDiffuse.Send(Value);
end;

{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
function TMaterialNode.GetReflSpecularExp: Single;
begin
  Result := FdReflSpecularExp.Value;
end;

procedure TMaterialNode.SetReflSpecularExp(const Value: Single);
begin
  FdReflSpecularExp.Send(Value);
end;

{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
function TMaterialNode.GetTransSpecularExp: Single;
begin
  Result := FdTransSpecularExp.Value;
end;

procedure TMaterialNode.SetTransSpecularExp(const Value: Single);
begin
  FdTransSpecularExp.Send(Value);
end;

{$endif not CASTLE_SLIM_NODES}
{$endif read_implementation}
