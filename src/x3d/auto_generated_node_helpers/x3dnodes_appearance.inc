{ -*- buffer-read-only: t -*-

  Copyright 2015-2020 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal .

  The documentation for properties should go to x3dnodes_documentation.txt . }

{$ifdef read_interface}

  strict private
{$ifndef CASTLE_SLIM_NODES}
    function GetFillProperties: TFillPropertiesNode;
    procedure SetFillProperties(const Value: TFillPropertiesNode);
{$endif not CASTLE_SLIM_NODES}
    function GetLineProperties: TLinePropertiesNode;
    procedure SetLineProperties(const Value: TLinePropertiesNode);
    function GetBackMaterial: TAbstractMaterialNode;
    procedure SetBackMaterial(const Value: TAbstractMaterialNode);
    function GetTextureTransform: TAbstractTextureTransformNode;
    procedure SetTextureTransform(const Value: TAbstractTextureTransformNode);
    function GetShadowCaster: Boolean;
    procedure SetShadowCaster(const Value: Boolean);
    function GetHeightMapScale: Single;
    procedure SetHeightMapScale(const Value: Single);
    function GetBlendMode: TBlendModeNode;
    procedure SetBlendMode(const Value: TBlendModeNode);
  public
{$ifndef CASTLE_SLIM_NODES}
    { X3D field "fillProperties". } { }
    property FillProperties: TFillPropertiesNode read GetFillProperties write SetFillProperties;
{$endif not CASTLE_SLIM_NODES}
    { X3D field "lineProperties". } { }
    property LineProperties: TLinePropertiesNode read GetLineProperties write SetLineProperties;
    { X3D field "backMaterial". } { }
    property BackMaterial: TAbstractMaterialNode read GetBackMaterial write SetBackMaterial;
    { Set X3D field "shaders". } { }
    procedure SetShaders(const Value: array of TAbstractShaderNode);
    { X3D field "textureTransform". } { }
    property TextureTransform: TAbstractTextureTransformNode read GetTextureTransform write SetTextureTransform;
    { Set X3D field "receiveShadows". } { }
    procedure SetReceiveShadows(const Value: array of TAbstractPunctualLightNode);
    { X3D field "shadowCaster". } { }
    property ShadowCaster: Boolean read GetShadowCaster write SetShadowCaster;
    { X3D field "heightMapScale". } { }
    property HeightMapScale: Single read GetHeightMapScale write SetHeightMapScale;
    { X3D field "blendMode". } { }
    property BlendMode: TBlendModeNode read GetBlendMode write SetBlendMode;
    { Set X3D field "effects". } { }
    procedure SetEffects(const Value: array of TEffectNode);

{$endif read_interface}

{$ifdef read_implementation}

{ TAppearanceNode ----------------------------------------------- }

{$ifndef CASTLE_SLIM_NODES}
function TAppearanceNode.GetFillProperties: TFillPropertiesNode;
begin
  if FdFillProperties.Value is TFillPropertiesNode then
    Result := TFillPropertiesNode(FdFillProperties.Value)
  else
    Result := nil;
end;

procedure TAppearanceNode.SetFillProperties(const Value: TFillPropertiesNode);
begin
  FdFillProperties.Send(Value);
end;

{$endif not CASTLE_SLIM_NODES}
function TAppearanceNode.GetLineProperties: TLinePropertiesNode;
begin
  if FdLineProperties.Value is TLinePropertiesNode then
    Result := TLinePropertiesNode(FdLineProperties.Value)
  else
    Result := nil;
end;

procedure TAppearanceNode.SetLineProperties(const Value: TLinePropertiesNode);
begin
  FdLineProperties.Send(Value);
end;

function TAppearanceNode.GetBackMaterial: TAbstractMaterialNode;
begin
  if FdBackMaterial.Value is TAbstractMaterialNode then
    Result := TAbstractMaterialNode(FdBackMaterial.Value)
  else
    Result := nil;
end;

procedure TAppearanceNode.SetBackMaterial(const Value: TAbstractMaterialNode);
begin
  FdBackMaterial.Send(Value);
end;

procedure TAppearanceNode.SetShaders(const Value: array of TAbstractShaderNode);
var
  L: Integer;
  A: array of TX3DNode;
begin
  L := High(Value) + 1;
  SetLength(A, L);
  if L > 0 then
    Move(Value[0], A[0], L * SizeOf(TAbstractShaderNode));
  FdShaders.Send(A);
end;

function TAppearanceNode.GetTextureTransform: TAbstractTextureTransformNode;
begin
  if FdTextureTransform.Value is TAbstractTextureTransformNode then
    Result := TAbstractTextureTransformNode(FdTextureTransform.Value)
  else
    Result := nil;
end;

procedure TAppearanceNode.SetTextureTransform(const Value: TAbstractTextureTransformNode);
begin
  FdTextureTransform.Send(Value);
end;

procedure TAppearanceNode.SetReceiveShadows(const Value: array of TAbstractPunctualLightNode);
var
  L: Integer;
  A: array of TX3DNode;
begin
  L := High(Value) + 1;
  SetLength(A, L);
  if L > 0 then
    Move(Value[0], A[0], L * SizeOf(TAbstractPunctualLightNode));
  FdReceiveShadows.Send(A);
end;

function TAppearanceNode.GetShadowCaster: Boolean;
begin
  Result := FdShadowCaster.Value;
end;

procedure TAppearanceNode.SetShadowCaster(const Value: Boolean);
begin
  FdShadowCaster.Send(Value);
end;

function TAppearanceNode.GetHeightMapScale: Single;
begin
  Result := FdHeightMapScale.Value;
end;

procedure TAppearanceNode.SetHeightMapScale(const Value: Single);
begin
  FdHeightMapScale.Send(Value);
end;

function TAppearanceNode.GetBlendMode: TBlendModeNode;
begin
  if FdBlendMode.Value is TBlendModeNode then
    Result := TBlendModeNode(FdBlendMode.Value)
  else
    Result := nil;
end;

procedure TAppearanceNode.SetBlendMode(const Value: TBlendModeNode);
begin
  FdBlendMode.Send(Value);
end;

procedure TAppearanceNode.SetEffects(const Value: array of TEffectNode);
var
  L: Integer;
  A: array of TX3DNode;
begin
  L := High(Value) + 1;
  SetLength(A, L);
  if L > 0 then
    Move(Value[0], A[0], L * SizeOf(TEffectNode));
  FdEffects.Send(A);
end;

{$endif read_implementation}
