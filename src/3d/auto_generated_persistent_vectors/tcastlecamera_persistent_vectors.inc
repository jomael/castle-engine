{ -*- buffer-read-only: t -*-

  Copyright 2018-2018 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FInitialPositionPersistent: TCastleVector3Persistent;
  function GetInitialPositionForPersistent: TVector3;
  procedure SetInitialPositionForPersistent(const AValue: TVector3);
published
  { @link(InitialPosition) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(InitialPosition) directly.

    @seealso InitialPosition }
  property InitialPositionPersistent: TCastleVector3Persistent read FInitialPositionPersistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TCastleCamera.GetInitialPositionForPersistent: TVector3;
begin
  Result := InitialPosition;
end;

procedure TCastleCamera.SetInitialPositionForPersistent(const AValue: TVector3);
begin
  InitialPosition := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FInitialPositionPersistent := TCastleVector3Persistent.Create;
  FInitialPositionPersistent.InternalGetValue := @GetInitialPositionForPersistent;
  FInitialPositionPersistent.InternalSetValue := @SetInitialPositionForPersistent;
  FInitialPositionPersistent.InternalDefaultValue := InitialPosition; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FInitialPositionPersistent);
{$endif read_implementation_destructor}

{ -*- buffer-read-only: t -*-

  Copyright 2018-2018 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FInitialDirectionPersistent: TCastleVector3Persistent;
  function GetInitialDirectionForPersistent: TVector3;
  procedure SetInitialDirectionForPersistent(const AValue: TVector3);
published
  { @link(InitialDirection) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(InitialDirection) directly.

    @seealso InitialDirection }
  property InitialDirectionPersistent: TCastleVector3Persistent read FInitialDirectionPersistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TCastleCamera.GetInitialDirectionForPersistent: TVector3;
begin
  Result := InitialDirection;
end;

procedure TCastleCamera.SetInitialDirectionForPersistent(const AValue: TVector3);
begin
  InitialDirection := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FInitialDirectionPersistent := TCastleVector3Persistent.Create;
  FInitialDirectionPersistent.InternalGetValue := @GetInitialDirectionForPersistent;
  FInitialDirectionPersistent.InternalSetValue := @SetInitialDirectionForPersistent;
  FInitialDirectionPersistent.InternalDefaultValue := InitialDirection; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FInitialDirectionPersistent);
{$endif read_implementation_destructor}

{ -*- buffer-read-only: t -*-

  Copyright 2018-2018 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FInitialUpPersistent: TCastleVector3Persistent;
  function GetInitialUpForPersistent: TVector3;
  procedure SetInitialUpForPersistent(const AValue: TVector3);
published
  { @link(InitialUp) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(InitialUp) directly.

    @seealso InitialUp }
  property InitialUpPersistent: TCastleVector3Persistent read FInitialUpPersistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TCastleCamera.GetInitialUpForPersistent: TVector3;
begin
  Result := InitialUp;
end;

procedure TCastleCamera.SetInitialUpForPersistent(const AValue: TVector3);
begin
  InitialUp := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FInitialUpPersistent := TCastleVector3Persistent.Create;
  FInitialUpPersistent.InternalGetValue := @GetInitialUpForPersistent;
  FInitialUpPersistent.InternalSetValue := @SetInitialUpForPersistent;
  FInitialUpPersistent.InternalDefaultValue := InitialUp; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FInitialUpPersistent);
{$endif read_implementation_destructor}

{ -*- buffer-read-only: t -*-

  Copyright 2018-2018 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FGravityUpPersistent: TCastleVector3Persistent;
  function GetGravityUpForPersistent: TVector3;
  procedure SetGravityUpForPersistent(const AValue: TVector3);
published
  { @link(GravityUp) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(GravityUp) directly.

    @seealso GravityUp }
  property GravityUpPersistent: TCastleVector3Persistent read FGravityUpPersistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TCastleCamera.GetGravityUpForPersistent: TVector3;
begin
  Result := GravityUp;
end;

procedure TCastleCamera.SetGravityUpForPersistent(const AValue: TVector3);
begin
  GravityUp := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FGravityUpPersistent := TCastleVector3Persistent.Create;
  FGravityUpPersistent.InternalGetValue := @GetGravityUpForPersistent;
  FGravityUpPersistent.InternalSetValue := @SetGravityUpForPersistent;
  FGravityUpPersistent.InternalDefaultValue := GravityUp; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FGravityUpPersistent);
{$endif read_implementation_destructor}

